/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs");
const path = require("path");
let todos = [];
const app = express();

app.use(bodyParser.json());

/*1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos*/
app.get('/todos', (req, res) => {
  res.status(200).json(todos);
});

/*2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123 */
app.get('/todos/:id', (req, res) => {
  const id = Number(req.params.id);
  const finditem = todos.find(todo => todo.id == id);
  if (!finditem) {
    res.status(404).send();
  } else {
    res.json(finditem);
  }
});

/*3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" } */
app.post('/todos', (req, res) => {
  let newitem = {};
  newitem.id = Math.floor(Math.random() * 300);
  newitem.title = req.body.title;
  newitem.description = req.body.description;
  todos.push(newitem);
  res.status(201).json(newitem);
});
/*  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true } */
app.put('/todos/:id', (req, res) => {
  const updatedItemIndex = todos.findIndex(todo => todo.id === Number(req.params.id));
  if (updatedItemIndex === -1) {
    res.status(404).send();
  } else {
    todos[updatedItemIndex].title = req.body.title;
    todos[updatedItemIndex].description = req.body.description;
    res.json(todos[updatedItemIndex]);
  }
});
/*5. DELETE /todos/:id - Delete a todo item by ID
Description: Deletes a todo item identified by its ID.
Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
Example: DELETE http://localhost:3000/todos/123*/


app.delete('/todos/:id', (req, res) => {
  const index = todos.findIndex(todo => todo.id == parseInt(req.params.id));
  if (index == -1) {
    res.status(404).send("enter valid item id");
  }
  else {
    todos.splice(index, 1);
    res.send(200).send("done");
  }
});
/*- For any other route not defined in the server return 404*/
app.all('*', (req, res) => {
  res.status(404).send("enter a valid route")
})
app.listen(3000, () => { console.log("server running on 3000 port") })

module.exports = app;

/* const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
const path = require("path");
const { title } = require('process');

const app = express();
app.use(bodyParser.json());


/*1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos*/
app.get('/todos', (req, res) => {
    fs.readFile('todos.json', 'utf8', (err, data) => {
        if (err) throw err;
        else
            console.log(data);
        console.log(JSON.parse(data))//convert String to JSON
        res.status(200).json(JSON.parse(data));

    })
});
/*2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123 */

app.get('/todos/:id', (req, res) => {
    fs.readFile('todos.json', 'utf8', (err, data) => {
        if (err) throw err;
        const todos = JSON.parse(data);
        const indexOfTodo = todos.findIndex(todo => todo.id == parseInt(req.params.id));
        if (indexOfTodo === -1) {
            res.status(404).send("todo not found");
        }
        res.status(200).json(todos[indexOfTodo]);
    })
});
/*3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" } */
app.post('/todos', (req, res) => {
    const newTodo = {};
    newTodo.id = Math.floor(Math.random() * 1000);
    newTodo.title = req.body.title;
    newTodo.description = req.body.description;
    fs.readFile('todos.json', 'utf8', (err, data) => {
        if (err) throw err;
        const todos = JSON.parse(data);
        todos.push(newTodo);
        fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
            if (err) throw err;
            res.status(200).send("done");
        })
    })
});
/*  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true } */
app.put('/todos/:id', (req, res) => {
    fs.readFile('todos.json', 'utf-8', (err, data) => {

        if (err) throw err;
        const todos = JSON.parse(data);
        const todoIndex = todos.findIndex(todo => todo.id == parseInt(req.params.id));
        if (todoIndex == -1) {
            res.status(404).send("invalid id");
        }
        todos[todoIndex].title = req.body.title;
        todos[todoIndex].description = req.body.description;
        console.log("done");
        fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
            if (err) {
                res.send(404).send("todo item not found");
            }
            res.send(200).send("done");
        })
    })
});
/*5. DELETE /todos/:id - Delete a todo item by ID
Description: Deletes a todo item identified by its ID.
Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
Example: DELETE http://localhost:3000/todos/123*/
app.delete('/todos/:id', (req, res) => {
    fs.readFile('todos.json', 'utf-8', (err, data) => {

        if (err) throw err;
        const todos = JSON.parse(data);
        const todoIndex = todos.findIndex(todo => todo.id == parseInt(req.params.id));
        if (todoIndex == -1) {
            res.status(404).send("invalid id");
        }
        todos.splice((todoIndex), 1);
        console.log("done");
        fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
            if (err) {
                res.send(404).send("todo item not found");
            }
            res.send(200).send("done");
        })
    })
});
app.all('*', (req, res) => {
    res.status(404).send("Route not found");
})
app.listen(3000, () => { console.log("server running on 3000 port") }) */
/*
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');
const path = require("path");
const { title } = require('process');

const app = express();
app.use(bodyParser.json());


/*1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos*/
app.get('/todos', (req, res) => {
    fs.readFile('todos.json', 'utf8', (err, data) => {
        if (err) throw err;
        else
            console.log(data);
        console.log(JSON.parse(data))//convert String to JSON
        res.status(200).json(JSON.parse(data));

    })
});
/*2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123 */

app.get('/todos/:id', (req, res) => {
    fs.readFile('todos.json', 'utf8', (err, data) => {
        if (err) throw err;
        const todos = JSON.parse(data);
        const indexOfTodo = todos.findIndex(todo => todo.id == parseInt(req.params.id));
        if (indexOfTodo === -1) {
            res.status(404).send("todo not found");
        }
        res.status(200).json(todos[indexOfTodo]);
    })
});
/*3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" } */
app.post('/todos', (req, res) => {
    const newTodo = {};
    newTodo.id = Math.floor(Math.random() * 1000);
    newTodo.title = req.body.title;
    newTodo.description = req.body.description;
    fs.readFile('todos.json', 'utf8', (err, data) => {
        if (err) throw err;
        const todos = JSON.parse(data);
        todos.push(newTodo);
        fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
            if (err) throw err;
            res.status(200).send("done");
        })
    })
});
/*  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true } */
app.put('/todos/:id', (req, res) => {
    fs.readFile('todos.json', 'utf-8', (err, data) => {

        if (err) throw err;
        const todos = JSON.parse(data);
        const todoIndex = todos.findIndex(todo => todo.id == parseInt(req.params.id));
        if (todoIndex == -1) {
            res.status(404).send("invalid id");
        }
        todos[todoIndex].title = req.body.title;
        todos[todoIndex].description = req.body.description;
        console.log("done");
        fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
            if (err) {
                res.send(404).send("todo item not found");
            }
            res.send(200).send("done");
        })
    })
});
/*5. DELETE /todos/:id - Delete a todo item by ID
Description: Deletes a todo item identified by its ID.
Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
Example: DELETE http://localhost:3000/todos/123*/
app.delete('/todos/:id', (req, res) => {
    fs.readFile('todos.json', 'utf-8', (err, data) => {

        if (err) throw err;
        const todos = JSON.parse(data);
        const todoIndex = todos.findIndex(todo => todo.id == parseInt(req.params.id));
        if (todoIndex == -1) {
            res.status(404).send("invalid id");
        }
        todos.splice((todoIndex), 1);
        console.log("done");
        fs.writeFile('todos.json', JSON.stringify(todos), (err) => {
            if (err) {
                res.send(404).send("todo item not found");
            }
            res.send(200).send("done");
        })
    })
});
app.all('*', (req, res) => {
    res.status(404).send("Route not found");
})
app.listen(3000, () => { console.log("server running on 3000 port") })

*/